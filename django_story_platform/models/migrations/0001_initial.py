# Generated by Django 4.2.7

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='个人简介')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='故事标题')),
                ('topic', models.TextField(verbose_name='故事主题')),
                ('main_role', models.CharField(blank=True, max_length=100, verbose_name='主角')),
                ('scene', models.CharField(blank=True, max_length=200, verbose_name='场景')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('generating', '生成中'), ('completed', '已完成'), ('failed', '失败'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='状态')),
                ('config', models.JSONField(default=dict, verbose_name='生成配置')),
                ('pages', models.JSONField(blank=True, default=list, verbose_name='故事页面')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to='models.user')),
            ],
            options={
                'verbose_name': '故事',
                'verbose_name_plural': '故事',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_stage', models.CharField(default='pending', max_length=50, verbose_name='当前阶段')),
                ('stage_progress', models.IntegerField(default=0, verbose_name='阶段进度')),
                ('total_progress', models.IntegerField(default=0, verbose_name='总进度')),
                ('stage_details', models.JSONField(default=dict, verbose_name='阶段详情')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('story', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='models.story')),
            ],
            options={
                'verbose_name': '故事进度',
                'verbose_name_plural': '故事进度',
            },
        ),
        migrations.CreateModel(
            name='GenerationTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('story', '故事生成'), ('image', '图像生成'), ('speech', '语音生成'), ('video', '视频合成')], max_length=50, verbose_name='任务类型')),
                ('celery_task_id', models.CharField(max_length=255, unique=True, verbose_name='Celery任务ID')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('running', '运行中'), ('completed', '已完成'), ('failed', '失败'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='状态')),
                ('progress', models.IntegerField(default=0, verbose_name='进度百分比')),
                ('result_data', models.JSONField(default=dict, verbose_name='结果数据')),
                ('error_message', models.TextField(blank=True, verbose_name='错误信息')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='models.story')),
            ],
            options={
                'verbose_name': '生成任务',
                'verbose_name_plural': '生成任务',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_type', models.CharField(choices=[('image', '图像'), ('audio', '音频'), ('video', '视频'), ('subtitle', '字幕')], max_length=20, verbose_name='文件类型')),
                ('file_path', models.CharField(max_length=500, verbose_name='文件路径')),
                ('file_name', models.CharField(max_length=255, verbose_name='文件名')),
                ('file_size', models.BigIntegerField(verbose_name='文件大小(字节)')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='MIME类型')),
                ('metadata', models.JSONField(default=dict, verbose_name='元数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to='models.story')),
            ],
            options={
                'verbose_name': '媒体文件',
                'verbose_name_plural': '媒体文件',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MediaLibrary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='媒体库名称')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否公开')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_libraries', to='models.user')),
            ],
            options={
                'verbose_name': '媒体库',
                'verbose_name_plural': '媒体库',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MediaAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('asset_type', models.CharField(choices=[('image', '图像'), ('audio', '音频'), ('video', '视频'), ('template', '模板')], max_length=20, verbose_name='资产类型')),
                ('file_path', models.CharField(max_length=500, verbose_name='文件路径')),
                ('file_name', models.CharField(max_length=255, verbose_name='文件名')),
                ('file_size', models.BigIntegerField(verbose_name='文件大小(字节)')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='MIME类型')),
                ('metadata', models.JSONField(default=dict, verbose_name='元数据')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='models.medialibrary')),
            ],
            options={
                'verbose_name': '媒体资产',
                'verbose_name_plural': '媒体资产',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('story_completed', '故事生成完成'), ('story_failed', '故事生成失败'), ('task_progress', '任务进度更新'), ('system', '系统通知')], max_length=50, verbose_name='通知类型')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('message', models.TextField(verbose_name='消息内容')),
                ('data', models.JSONField(default=dict, verbose_name='附加数据')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='阅读时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='models.user')),
            ],
            options={
                'verbose_name': '通知',
                'verbose_name_plural': '通知',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='邮件通知')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='推送通知')),
                ('story_completed_notify', models.BooleanField(default=True, verbose_name='故事完成通知')),
                ('story_failed_notify', models.BooleanField(default=True, verbose_name='故事失败通知')),
                ('progress_notify', models.BooleanField(default=False, verbose_name='进度通知')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to='models.user')),
            ],
            options={
                'verbose_name': '通知设置',
                'verbose_name_plural': '通知设置',
            },
        ),
    ]
